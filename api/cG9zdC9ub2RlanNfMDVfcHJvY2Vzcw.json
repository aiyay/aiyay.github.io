{"title":"(转)Node.js搬运过来的那种V——进程管理","date":"2018-09-10T16:00:00.000Z","author":"aiyay","excerpt":"","slug":"nodejs_05_process","dropcap":true,"tags":["npm","node.js","reprint"],"categories":["Node.js"],"updated":"2018-09-11T04:37:50.387Z","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><p>文章来源于<a href=\"https://github.com/nqdeng/7-days-nodejs\" target=\"_blank\" rel=\"noopener\">nqdeng</a>,感谢大佬的分享;</p>\n<h2 id=\"进程管理\"><a href=\"#进程管理\" class=\"headerlink\" title=\"进程管理\"></a>进程管理</h2><p>NodeJS可以感知和控制自身进程的运行环境和状态，也可以创建子进程并与其协同工作，这使得NodeJS可以把多个程序组合在一起共同完成某项工作，并在其中充当胶水和调度器的作用。本章除了介绍与之相关的NodeJS内置模块外，还会重点介绍典型的使用场景。</p>\n<h3 id=\"开门红\"><a href=\"#开门红\" class=\"headerlink\" title=\"开门红\"></a>开门红</h3><p>我们已经知道了NodeJS自带的<code>fs</code>模块比较基础，把一个目录里的所有文件和子目录都拷贝到另一个目录里需要写不少代码。另外我们也知道，终端下的<code>cp</code>命令比较好用，一条<code>cp -r source/* target</code>命令就能搞定目录拷贝。那我们首先看看如何使用NodeJS调用终端命令来简化目录拷贝，示例代码如下：</p>\n<pre><code>var child_process = require(&apos;child_process&apos;);\nvar util = require(&apos;util&apos;);\n\nfunction copy(source, target, callback) {\n    child_process.exec(\n        util.format(&apos;cp -r %s/* %s&apos;, source, target), callback);\n}\n\ncopy(&apos;a&apos;, &apos;b&apos;, function (err) {\n    // ...\n});\n</code></pre><p>从以上代码中可以看到，子进程是异步运行的，通过回调函数返回执行结果。</p>\n<h3 id=\"API走马观花\"><a href=\"#API走马观花\" class=\"headerlink\" title=\"API走马观花\"></a>API走马观花</h3><p>我们先大致看看NodeJS提供了哪些和进程管理有关的API。这里并不逐一介绍每个API的使用方法，官方文档已经做得很好了。</p>\n<h4 id=\"Process\"><a href=\"#Process\" class=\"headerlink\" title=\"Process\"></a>Process</h4><blockquote>\n<p>   <strong>官方文档： </strong> <a href=\"http://nodejs.org/api/process.html\" target=\"_blank\" rel=\"noopener\">http://nodejs.org/api/process.html</a></p>\n</blockquote>\n<p>任何一个进程都有启动进程时使用的命令行参数，有标准输入标准输出，有运行权限，有运行环境和运行状态。在NodeJS中，可以通过<code>process</code>对象感知和控制NodeJS自身进程的方方面面。另外需要注意的是，<code>process</code>不是内置模块，而是一个全局对象，因此在任何地方都可以直接使用。</p>\n<h4 id=\"Child-Process\"><a href=\"#Child-Process\" class=\"headerlink\" title=\"Child Process\"></a>Child Process</h4><blockquote>\n<p>   <strong>官方文档： </strong> <a href=\"http://nodejs.org/api/child_process.html\" target=\"_blank\" rel=\"noopener\">http://nodejs.org/api/child_process.html</a></p>\n</blockquote>\n<p>使用<code>child_process</code>模块可以创建和控制子进程。该模块提供的API中最核心的是<code>.spawn</code>，其余API都是针对特定使用场景对它的进一步封装，算是一种语法糖。</p>\n<h4 id=\"Cluster\"><a href=\"#Cluster\" class=\"headerlink\" title=\"Cluster\"></a>Cluster</h4><blockquote>\n<p>   <strong>官方文档： </strong> <a href=\"http://nodejs.org/api/cluster.html\" target=\"_blank\" rel=\"noopener\">http://nodejs.org/api/cluster.html</a></p>\n</blockquote>\n<p><code>cluster</code>模块是对<code>child_process</code>模块的进一步封装，专用于解决单进程NodeJS Web服务器无法充分利用多核CPU的问题。使用该模块可以简化多进程服务器程序的开发，让每个核上运行一个工作进程，并统一通过主进程监听端口和分发请求。</p>\n<h3 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h3><p>和进程管理相关的API单独介绍起来比较枯燥，因此这里从一些典型的应用场景出发，分别介绍一些重要API的使用方法。</p>\n<h4 id=\"如何获取命令行参数\"><a href=\"#如何获取命令行参数\" class=\"headerlink\" title=\"如何获取命令行参数\"></a>如何获取命令行参数</h4><p>在NodeJS中可以通过<code>process.argv</code>获取命令行参数。但是比较意外的是，<code>node</code>执行程序路径和主模块文件路径固定占据了<code>argv[0]</code>和<code>argv[1]</code>两个位置，而第一个命令行参数从<code>argv[2]</code>开始。为了让<code>argv</code>使用起来更加自然，可以按照以下方式处理。</p>\n<pre><code>function main(argv) {\n    // ...\n}\n\nmain(process.argv.slice(2));\n</code></pre><h4 id=\"如何退出程序\"><a href=\"#如何退出程序\" class=\"headerlink\" title=\"如何退出程序\"></a>如何退出程序</h4><p>通常一个程序做完所有事情后就正常退出了，这时程序的退出状态码为<code>0</code>。或者一个程序运行时发生了异常后就挂了，这时程序的退出状态码不等于<code>0</code>。如果我们在代码中捕获了某个异常，但是觉得程序不应该继续运行下去，需要立即退出，并且需要把退出状态码设置为指定数字，比如<code>1</code>，就可以按照以下方式：</p>\n<pre><code>try {\n    // ...\n} catch (err) {\n    // ...\n    process.exit(1);\n}\n</code></pre><h4 id=\"如何控制输入输出\"><a href=\"#如何控制输入输出\" class=\"headerlink\" title=\"如何控制输入输出\"></a>如何控制输入输出</h4><p>NodeJS程序的标准输入流（stdin）、一个标准输出流（stdout）、一个标准错误流（stderr）分别对应<code>process.stdin</code>、<code>process.stdout</code>和<code>process.stderr</code>，第一个是只读数据流，后边两个是只写数据流，对它们的操作按照对数据流的操作方式即可。例如，<code>console.log</code>可以按照以下方式实现。</p>\n<pre><code>function log() {\n    process.stdout.write(\n        util.format.apply(util, arguments) + &apos;\\n&apos;);\n}\n</code></pre><h4 id=\"如何降权\"><a href=\"#如何降权\" class=\"headerlink\" title=\"如何降权\"></a>如何降权</h4><p>在Linux系统下，我们知道需要使用root权限才能监听1024以下端口。但是一旦完成端口监听后，继续让程序运行在root权限下存在安全隐患，因此最好能把权限降下来。以下是这样一个例子。</p>\n<pre><code>http.createServer(callback).listen(80, function () {\n    var env = process.env,\n        uid = parseInt(env[&apos;SUDO_UID&apos;] || process.getuid(), 10),\n        gid = parseInt(env[&apos;SUDO_GID&apos;] || process.getgid(), 10);\n\n    process.setgid(gid);\n    process.setuid(uid);\n});\n</code></pre><p>上例中有几点需要注意：</p>\n<ol>\n<li><p>如果是通过<code>sudo</code>获取root权限的，运行程序的用户的UID和GID保存在环境变量<code>SUDO_UID</code>和<code>SUDO_GID</code>里边。如果是通过<code>chmod +s</code>方式获取root权限的，运行程序的用户的UID和GID可直接通过<code>process.getuid</code>和<code>process.getgid</code>方法获取。</p>\n</li>\n<li><p><code>process.setuid</code>和<code>process.setgid</code>方法只接受<code>number</code>类型的参数。</p>\n</li>\n<li><p>降权时必须先降GID再降UID，否则顺序反过来的话就没权限更改程序的GID了。</p>\n</li>\n</ol>\n<h4 id=\"如何创建子进程\"><a href=\"#如何创建子进程\" class=\"headerlink\" title=\"如何创建子进程\"></a>如何创建子进程</h4><p>以下是一个创建NodeJS子进程的例子。</p>\n<pre><code>var child = child_process.spawn(&apos;node&apos;, [ &apos;xxx.js&apos; ]);\n\nchild.stdout.on(&apos;data&apos;, function (data) {\n    console.log(&apos;stdout: &apos; + data);\n});\n\nchild.stderr.on(&apos;data&apos;, function (data) {\n    console.log(&apos;stderr: &apos; + data);\n});\n\nchild.on(&apos;close&apos;, function (code) {\n    console.log(&apos;child process exited with code &apos; + code);\n});\n</code></pre><p>上例中使用了<code>.spawn(exec, args, options)</code>方法，该方法支持三个参数。第一个参数是执行文件路径，可以是执行文件的相对或绝对路径，也可以是根据PATH环境变量能找到的执行文件名。第二个参数中，数组中的每个成员都按顺序对应一个命令行参数。第三个参数可选，用于配置子进程的执行环境与行为。</p>\n<p>另外，上例中虽然通过子进程对象的<code>.stdout</code>和<code>.stderr</code>访问子进程的输出，但通过<code>options.stdio</code>字段的不同配置，可以将子进程的输入输出重定向到任何数据流上，或者让子进程共享父进程的标准输入输出流，或者直接忽略子进程的输入输出。</p>\n<h4 id=\"进程间如何通讯\"><a href=\"#进程间如何通讯\" class=\"headerlink\" title=\"进程间如何通讯\"></a>进程间如何通讯</h4><p>在Linux系统下，进程之间可以通过信号互相通信。以下是一个例子。</p>\n<pre><code>/* parent.js */\nvar child = child_process.spawn(&apos;node&apos;, [ &apos;child.js&apos; ]);\n\nchild.kill(&apos;SIGTERM&apos;);\n\n/* child.js */\nprocess.on(&apos;SIGTERM&apos;, function () {\n    cleanUp();\n    process.exit(0);\n});\n</code></pre><p>在上例中，父进程通过<code>.kill</code>方法向子进程发送<code>SIGTERM</code>信号，子进程监听<code>process</code>对象的<code>SIGTERM</code>事件响应信号。不要被<code>.kill</code>方法的名称迷惑了，该方法本质上是用来给进程发送信号的，进程收到信号后具体要做啥，完全取决于信号的种类和进程自身的代码。</p>\n<p>另外，如果父子进程都是NodeJS进程，就可以通过IPC（进程间通讯）双向传递数据。以下是一个例子。</p>\n<pre><code>/* parent.js */\nvar child = child_process.spawn(&apos;node&apos;, [ &apos;child.js&apos; ], {\n        stdio: [ 0, 1, 2, &apos;ipc&apos; ]\n    });\n\nchild.on(&apos;message&apos;, function (msg) {\n    console.log(msg);\n});\n\nchild.send({ hello: &apos;hello&apos; });\n\n/* child.js */\nprocess.on(&apos;message&apos;, function (msg) {\n    msg.hello = msg.hello.toUpperCase();\n    process.send(msg);\n});\n</code></pre><p>可以看到，父进程在创建子进程时，在<code>options.stdio</code>字段中通过<code>ipc</code>开启了一条IPC通道，之后就可以监听子进程对象的<code>message</code>事件接收来自子进程的消息，并通过<code>.send</code>方法给子进程发送消息。在子进程这边，可以在<code>process</code>对象上监听<code>message</code>事件接收来自父进程的消息，并通过<code>.send</code>方法向父进程发送消息。数据在传递过程中，会先在发送端使用<code>JSON.stringify</code>方法序列化，再在接收端使用<code>JSON.parse</code>方法反序列化。</p>\n<h4 id=\"如何守护子进程\"><a href=\"#如何守护子进程\" class=\"headerlink\" title=\"如何守护子进程\"></a>如何守护子进程</h4><p>守护进程一般用于监控工作进程的运行状态，在工作进程不正常退出时重启工作进程，保障工作进程不间断运行。以下是一种实现方式。</p>\n<pre><code>/* daemon.js */\nfunction spawn(mainModule) {\n    var worker = child_process.spawn(&apos;node&apos;, [ mainModule ]);\n\n    worker.on(&apos;exit&apos;, function (code) {\n        if (code !== 0) {\n            spawn(mainModule);\n        }\n    });\n}\n\nspawn(&apos;worker.js&apos;);\n</code></pre><p>可以看到，工作进程非正常退出时，守护进程立即重启工作进程。</p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>本章介绍了使用NodeJS管理进程时需要的API以及主要的应用场景，总结起来有以下几点：</p>\n<ul>\n<li><p>使用<code>process</code>对象管理自身。</p>\n</li>\n<li><p>使用<code>child_process</code>模块创建和管理子进程。</p>\n</li>\n</ul>\n","prev":{"title":"(转)Node.js搬运过来的那种Ⅱ——代码的组织和部署","slug":"nodejs_02_code_management_and_deployment"},"next":{"title":"(转)Node.js搬运过来的那种Ⅵ——异步编程","slug":"nodejs_06_async_programming"},"link":"/2018/09/11","toc":[{"title":"进程管理","id":"进程管理","index":"1","children":[{"title":"开门红","id":"开门红","index":"1.1"},{"title":"API走马观花","id":"API走马观花","index":"1.2","children":[{"title":"Process","id":"Process","index":"1.2.1"},{"title":"Child Process","id":"Child-Process","index":"1.2.2"},{"title":"Cluster","id":"Cluster","index":"1.2.3"}]},{"title":"应用场景","id":"应用场景","index":"1.3","children":[{"title":"如何获取命令行参数","id":"如何获取命令行参数","index":"1.3.1"},{"title":"如何退出程序","id":"如何退出程序","index":"1.3.2"},{"title":"如何控制输入输出","id":"如何控制输入输出","index":"1.3.3"},{"title":"如何降权","id":"如何降权","index":"1.3.4"},{"title":"如何创建子进程","id":"如何创建子进程","index":"1.3.5"},{"title":"进程间如何通讯","id":"进程间如何通讯","index":"1.3.6"},{"title":"如何守护子进程","id":"如何守护子进程","index":"1.3.7"}]},{"title":"小结","id":"小结","index":"1.4"}]}]}