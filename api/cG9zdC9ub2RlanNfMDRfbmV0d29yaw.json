{"title":"(转)Node.js搬运过来的那种Ⅳ——网络操作","date":"2018-09-11T05:17:20.000Z","author":"aiyay","excerpt":"","slug":"nodejs_04_network","dropcap":true,"tags":["npm","node.js","reprint"],"categories":["Node.js"],"updated":"2018-09-11T05:48:44.092Z","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><p>文章来源于<a href=\"https://github.com/nqdeng/7-days-nodejs\" target=\"_blank\" rel=\"noopener\">nqdeng</a>,感谢大佬的分享;</p>\n<h2 id=\"网络操作\"><a href=\"#网络操作\" class=\"headerlink\" title=\"网络操作\"></a>网络操作</h2><p>不了解网络编程的程序员不是好前端，而NodeJS恰好提供了一扇了解网络编程的窗口。通过NodeJS，除了可以编写一些服务端程序来协助前端开发和测试外，还能够学习一些HTTP协议与Socket协议的相关知识，这些知识在优化前端性能和排查前端故障时说不定能派上用场。本章将介绍与之相关的NodeJS内置模块。</p>\n<h3 id=\"开门红\"><a href=\"#开门红\" class=\"headerlink\" title=\"开门红\"></a>开门红</h3><p>NodeJS本来的用途是编写高性能Web服务器。我们首先在这里重复一下官方文档里的例子，使用NodeJS内置的<code>http</code>模块简单实现一个HTTP服务器。</p>\n<pre><code>var http = require(&apos;http&apos;);\n\nhttp.createServer(function (request, response) {\n    response.writeHead(200, { &apos;Content-Type&apos;: &apos;text-plain&apos; });\n    response.end(&apos;Hello World\\n&apos;);\n}).listen(8124);\n</code></pre><p>以上程序创建了一个HTTP服务器并监听<code>8124</code>端口，打开浏览器访问该端口<code>http://127.0.0.1:8124/</code>就能够看到效果。</p>\n<blockquote>\n<p>   <strong>豆知识：</strong> 在Linux系统下，监听1024以下端口需要root权限。因此，如果想监听80或443端口的话，需要使用<code>sudo</code>命令启动程序。</p>\n</blockquote>\n<h3 id=\"API走马观花\"><a href=\"#API走马观花\" class=\"headerlink\" title=\"API走马观花\"></a>API走马观花</h3><p>我们先大致看看NodeJS提供了哪些和网络操作有关的API。这里并不逐一介绍每个API的使用方法，官方文档已经做得很好了。</p>\n<h4 id=\"HTTP\"><a href=\"#HTTP\" class=\"headerlink\" title=\"HTTP\"></a>HTTP</h4><blockquote>\n<p>   <strong>官方文档： </strong> <a href=\"http://nodejs.org/api/http.html\" target=\"_blank\" rel=\"noopener\">http://nodejs.org/api/http.html</a></p>\n</blockquote>\n<p>‘http’模块提供两种使用方式：</p>\n<ul>\n<li><p>作为服务端使用时，创建一个HTTP服务器，监听HTTP客户端请求并返回响应。</p>\n</li>\n<li><p>作为客户端使用时，发起一个HTTP客户端请求，获取服务端响应。</p>\n</li>\n</ul>\n<p>首先我们来看看服务端模式下如何工作。如开门红中的例子所示，首先需要使用<code>.createServer</code>方法创建一个服务器，然后调用<code>.listen</code>方法监听端口。之后，每当来了一个客户端请求，创建服务器时传入的回调函数就被调用一次。可以看出，这是一种事件机制。</p>\n<p>HTTP请求本质上是一个数据流，由请求头（headers）和请求体（body）组成。例如以下是一个完整的HTTP请求数据内容。</p>\n<pre><code>POST / HTTP/1.1\nUser-Agent: curl/7.26.0\nHost: localhost\nAccept: */*\nContent-Length: 11\nContent-Type: application/x-www-form-urlencoded\n\nHello World\n</code></pre><p>可以看到，空行之上是请求头，之下是请求体。HTTP请求在发送给服务器时，可以认为是按照从头到尾的顺序一个字节一个字节地以数据流方式发送的。而<code>http</code>模块创建的HTTP服务器在接收到完整的请求头后，就会调用回调函数。在回调函数中，除了可以使用<code>request</code>对象访问请求头数据外，还能把<code>request</code>对象当作一个只读数据流来访问请求体数据。以下是一个例子。</p>\n<pre><code>http.createServer(function (request, response) {\n    var body = [];\n\n    console.log(request.method);\n    console.log(request.headers);\n\n    request.on(&apos;data&apos;, function (chunk) {\n        body.push(chunk);\n    });\n\n    request.on(&apos;end&apos;, function () {\n        body = Buffer.concat(body);\n        console.log(body.toString());\n    });\n}).listen(80);\n\n------------------------------------\nPOST\n{ &apos;user-agent&apos;: &apos;curl/7.26.0&apos;,\n  host: &apos;localhost&apos;,\n  accept: &apos;*/*&apos;,\n  &apos;content-length&apos;: &apos;11&apos;,\n  &apos;content-type&apos;: &apos;application/x-www-form-urlencoded&apos; }\nHello World\n</code></pre><p>HTTP响应本质上也是一个数据流，同样由响应头（headers）和响应体（body）组成。例如以下是一个完整的HTTP请求数据内容。</p>\n<pre><code>HTTP/1.1 200 OK\nContent-Type: text/plain\nContent-Length: 11\nDate: Tue, 05 Nov 2013 05:31:38 GMT\nConnection: keep-alive\n\nHello World\n</code></pre><p>在回调函数中，除了可以使用<code>response</code>对象来写入响应头数据外，还能把<code>response</code>对象当作一个只写数据流来写入响应体数据。例如在以下例子中，服务端原样将客户端请求的请求体数据返回给客户端。</p>\n<pre><code>http.createServer(function (request, response) {\n    response.writeHead(200, { &apos;Content-Type&apos;: &apos;text/plain&apos; });\n\n    request.on(&apos;data&apos;, function (chunk) {\n        response.write(chunk);\n    });\n\n    request.on(&apos;end&apos;, function () {\n        response.end();\n    });\n}).listen(80);\n</code></pre><p>接下来我们看看客户端模式下如何工作。为了发起一个客户端HTTP请求，我们需要指定目标服务器的位置并发送请求头和请求体，以下示例演示了具体做法。</p>\n<pre><code>var options = {\n        hostname: &apos;www.example.com&apos;,\n        port: 80,\n        path: &apos;/upload&apos;,\n        method: &apos;POST&apos;,\n        headers: {\n            &apos;Content-Type&apos;: &apos;application/x-www-form-urlencoded&apos;\n        }\n    };\n\nvar request = http.request(options, function (response) {});\n\nrequest.write(&apos;Hello World&apos;);\nrequest.end();\n</code></pre><p>可以看到，<code>.request</code>方法创建了一个客户端，并指定请求目标和请求头数据。之后，就可以把<code>request</code>对象当作一个只写数据流来写入请求体数据和结束请求。另外，由于HTTP请求中<code>GET</code>请求是最常见的一种，并且不需要请求体，因此<code>http</code>模块也提供了以下便捷API。</p>\n<pre><code>http.get(&apos;http://www.example.com/&apos;, function (response) {});\n</code></pre><p>当客户端发送请求并接收到完整的服务端响应头时，就会调用回调函数。在回调函数中，除了可以使用<code>response</code>对象访问响应头数据外，还能把<code>response</code>对象当作一个只读数据流来访问响应体数据。以下是一个例子。</p>\n<pre><code>http.get(&apos;http://www.example.com/&apos;, function (response) {\n    var body = [];\n\n    console.log(response.statusCode);\n    console.log(response.headers);\n\n    response.on(&apos;data&apos;, function (chunk) {\n        body.push(chunk);\n    });\n\n    response.on(&apos;end&apos;, function () {\n        body = Buffer.concat(body);\n        console.log(body.toString());\n    });\n});\n\n------------------------------------\n200\n{ &apos;content-type&apos;: &apos;text/html&apos;,\n  server: &apos;Apache&apos;,\n  &apos;content-length&apos;: &apos;801&apos;,\n  date: &apos;Tue, 05 Nov 2013 06:08:41 GMT&apos;,\n  connection: &apos;keep-alive&apos; }\n&lt;!DOCTYPE html&gt;\n...\n</code></pre><h4 id=\"HTTPS\"><a href=\"#HTTPS\" class=\"headerlink\" title=\"HTTPS\"></a>HTTPS</h4><blockquote>\n<p>   <strong>官方文档： </strong> <a href=\"http://nodejs.org/api/https.html\" target=\"_blank\" rel=\"noopener\">http://nodejs.org/api/https.html</a></p>\n</blockquote>\n<p><code>https</code>模块与<code>http</code>模块极为类似，区别在于<code>https</code>模块需要额外处理SSL证书。</p>\n<p>在服务端模式下，创建一个HTTPS服务器的示例如下。</p>\n<pre><code>var options = {\n        key: fs.readFileSync(&apos;./ssl/default.key&apos;),\n        cert: fs.readFileSync(&apos;./ssl/default.cer&apos;)\n    };\n\nvar server = https.createServer(options, function (request, response) {\n        // ...\n    });\n</code></pre><p>可以看到，与创建HTTP服务器相比，多了一个<code>options</code>对象，通过<code>key</code>和<code>cert</code>字段指定了HTTPS服务器使用的私钥和公钥。 </p>\n<p>另外，NodeJS支持SNI技术，可以根据HTTPS客户端请求使用的域名动态使用不同的证书，因此同一个HTTPS服务器可以使用多个域名提供服务。接着上例，可以使用以下方法为HTTPS服务器添加多组证书。</p>\n<pre><code>server.addContext(&apos;foo.com&apos;, {\n    key: fs.readFileSync(&apos;./ssl/foo.com.key&apos;),\n    cert: fs.readFileSync(&apos;./ssl/foo.com.cer&apos;)\n});\n\nserver.addContext(&apos;bar.com&apos;, {\n    key: fs.readFileSync(&apos;./ssl/bar.com.key&apos;),\n    cert: fs.readFileSync(&apos;./ssl/bar.com.cer&apos;)\n});\n</code></pre><p>在客户端模式下，发起一个HTTPS客户端请求与<code>http</code>模块几乎相同，示例如下。</p>\n<pre><code>var options = {\n        hostname: &apos;www.example.com&apos;,\n        port: 443,\n        path: &apos;/&apos;,\n        method: &apos;GET&apos;\n    };\n\nvar request = https.request(options, function (response) {});\n\nrequest.end();\n</code></pre><p>但如果目标服务器使用的SSL证书是自制的，不是从颁发机构购买的，默认情况下<code>https</code>模块会拒绝连接，提示说有证书安全问题。在<code>options</code>里加入<code>rejectUnauthorized: false</code>字段可以禁用对证书有效性的检查，从而允许<code>https</code>模块请求开发环境下使用自制证书的HTTPS服务器。</p>\n<h4 id=\"URL\"><a href=\"#URL\" class=\"headerlink\" title=\"URL\"></a>URL</h4><blockquote>\n<p>   <strong>官方文档： </strong> <a href=\"http://nodejs.org/api/url.html\" target=\"_blank\" rel=\"noopener\">http://nodejs.org/api/url.html</a></p>\n</blockquote>\n<p>处理HTTP请求时<code>url</code>模块使用率超高，因为该模块允许解析URL、生成URL，以及拼接URL。首先我们来看看一个完整的URL的各组成部分。</p>\n<pre><code>                           href\n -----------------------------------------------------------------\n                            host              path\n                      --------------- ----------------------------\n http: // user:pass @ host.com : 8080 /p/a/t/h ?query=string #hash\n -----    ---------   --------   ---- -------- ------------- -----\nprotocol     auth     hostname   port pathname     search     hash\n                                                ------------\n                                                   query\n</code></pre><p>我们可以使用<code>.parse</code>方法来将一个URL字符串转换为URL对象，示例如下。</p>\n<pre><code>url.parse(&apos;http://user:pass@host.com:8080/p/a/t/h?query=string#hash&apos;);\n/* =&gt;\n{ protocol: &apos;http:&apos;,\n  auth: &apos;user:pass&apos;,\n  host: &apos;host.com:8080&apos;,\n  port: &apos;8080&apos;,\n  hostname: &apos;host.com&apos;,\n  hash: &apos;#hash&apos;,\n  search: &apos;?query=string&apos;,\n  query: &apos;query=string&apos;,\n  pathname: &apos;/p/a/t/h&apos;,\n  path: &apos;/p/a/t/h?query=string&apos;,\n  href: &apos;http://user:pass@host.com:8080/p/a/t/h?query=string#hash&apos; }\n*/\n</code></pre><p>传给<code>.parse</code>方法的不一定要是一个完整的URL，例如在HTTP服务器回调函数中，<code>request.url</code>不包含协议头和域名，但同样可以用<code>.parse</code>方法解析。</p>\n<pre><code>http.createServer(function (request, response) {\n    var tmp = request.url; // =&gt; &quot;/foo/bar?a=b&quot;\n    url.parse(tmp);\n    /* =&gt;\n    { protocol: null,\n      slashes: null,\n      auth: null,\n      host: null,\n      port: null,\n      hostname: null,\n      hash: null,\n      search: &apos;?a=b&apos;,\n      query: &apos;a=b&apos;,\n      pathname: &apos;/foo/bar&apos;,\n      path: &apos;/foo/bar?a=b&apos;,\n      href: &apos;/foo/bar?a=b&apos; }\n    */\n}).listen(80);\n</code></pre><p><code>.parse</code>方法还支持第二个和第三个布尔类型可选参数。第二个参数等于<code>true</code>时，该方法返回的URL对象中，<code>query</code>字段不再是一个字符串，而是一个经过<code>querystring</code>模块转换后的参数对象。第三个参数等于<code>true</code>时，该方法可以正确解析不带协议头的URL，例如<code>//www.example.com/foo/bar</code>。</p>\n<p>反过来，<code>format</code>方法允许将一个URL对象转换为URL字符串，示例如下。</p>\n<pre><code>url.format({\n    protocol: &apos;http:&apos;,\n    host: &apos;www.example.com&apos;,\n    pathname: &apos;/p/a/t/h&apos;,\n    search: &apos;query=string&apos;\n});\n/* =&gt;\n&apos;http://www.example.com/p/a/t/h?query=string&apos;\n*/\n</code></pre><p>另外，<code>.resolve</code>方法可以用于拼接URL，示例如下。</p>\n<pre><code>url.resolve(&apos;http://www.example.com/foo/bar&apos;, &apos;../baz&apos;);\n/* =&gt;\nhttp://www.example.com/baz\n*/\n</code></pre><h4 id=\"Query-String\"><a href=\"#Query-String\" class=\"headerlink\" title=\"Query String\"></a>Query String</h4><blockquote>\n<p>   <strong>官方文档： </strong> <a href=\"http://nodejs.org/api/querystring.html\" target=\"_blank\" rel=\"noopener\">http://nodejs.org/api/querystring.html</a></p>\n</blockquote>\n<p><code>querystring</code>模块用于实现URL参数字符串与参数对象的互相转换，示例如下。</p>\n<pre><code>querystring.parse(&apos;foo=bar&amp;baz=qux&amp;baz=quux&amp;corge&apos;);\n/* =&gt;\n{ foo: &apos;bar&apos;, baz: [&apos;qux&apos;, &apos;quux&apos;], corge: &apos;&apos; }\n*/\n\nquerystring.stringify({ foo: &apos;bar&apos;, baz: [&apos;qux&apos;, &apos;quux&apos;], corge: &apos;&apos; });\n/* =&gt;\n&apos;foo=bar&amp;baz=qux&amp;baz=quux&amp;corge=&apos;\n*/\n</code></pre><h4 id=\"Zlib\"><a href=\"#Zlib\" class=\"headerlink\" title=\"Zlib\"></a>Zlib</h4><blockquote>\n<p>   <strong>官方文档： </strong> <a href=\"http://nodejs.org/api/zlib.html\" target=\"_blank\" rel=\"noopener\">http://nodejs.org/api/zlib.html</a></p>\n</blockquote>\n<p><code>zlib</code>模块提供了数据压缩和解压的功能。当我们处理HTTP请求和响应时，可能需要用到这个模块。</p>\n<p>首先我们看一个使用<code>zlib</code>模块压缩HTTP响应体数据的例子。这个例子中，判断了客户端是否支持gzip，并在支持的情况下使用<code>zlib</code>模块返回gzip之后的响应体数据。</p>\n<pre><code>http.createServer(function (request, response) {\n    var i = 1024,\n        data = &apos;&apos;;\n\n    while (i--) {\n        data += &apos;.&apos;;\n    }\n\n    if ((request.headers[&apos;accept-encoding&apos;] || &apos;&apos;).indexOf(&apos;gzip&apos;) !== -1) {\n        zlib.gzip(data, function (err, data) {\n            response.writeHead(200, {\n                &apos;Content-Type&apos;: &apos;text/plain&apos;,\n                &apos;Content-Encoding&apos;: &apos;gzip&apos;\n            });\n            response.end(data);\n        });\n    } else {\n        response.writeHead(200, {\n            &apos;Content-Type&apos;: &apos;text/plain&apos;\n        });\n        response.end(data);\n    }\n}).listen(80);\n</code></pre><p>接着我们看一个使用<code>zlib</code>模块解压HTTP响应体数据的例子。这个例子中，判断了服务端响应是否使用gzip压缩，并在压缩的情况下使用<code>zlib</code>模块解压响应体数据。</p>\n<pre><code>var options = {\n        hostname: &apos;www.example.com&apos;,\n        port: 80,\n        path: &apos;/&apos;,\n        method: &apos;GET&apos;,\n        headers: {\n            &apos;Accept-Encoding&apos;: &apos;gzip, deflate&apos;\n        }\n    };\n\nhttp.request(options, function (response) {\n    var body = [];\n\n    response.on(&apos;data&apos;, function (chunk) {\n        body.push(chunk);\n    });\n\n    response.on(&apos;end&apos;, function () {\n        body = Buffer.concat(body);\n\n        if (response.headers[&apos;content-encoding&apos;] === &apos;gzip&apos;) {\n            zlib.gunzip(body, function (err, data) {\n                console.log(data.toString());\n            });\n        } else {\n            console.log(data.toString());\n        }\n    });\n}).end();\n</code></pre><h4 id=\"Net\"><a href=\"#Net\" class=\"headerlink\" title=\"Net\"></a>Net</h4><blockquote>\n<p>   <strong>官方文档： </strong> <a href=\"http://nodejs.org/api/net.html\" target=\"_blank\" rel=\"noopener\">http://nodejs.org/api/net.html</a></p>\n</blockquote>\n<p><code>net</code>模块可用于创建Socket服务器或Socket客户端。由于Socket在前端领域的使用范围还不是很广，这里先不涉及到WebSocket的介绍，仅仅简单演示一下如何从Socket层面来实现HTTP请求和响应。</p>\n<p>首先我们来看一个使用Socket搭建一个很不严谨的HTTP服务器的例子。这个HTTP服务器不管收到啥请求，都固定返回相同的响应。</p>\n<pre><code>net.createServer(function (conn) {\n    conn.on(&apos;data&apos;, function (data) {\n        conn.write([\n            &apos;HTTP/1.1 200 OK&apos;,\n            &apos;Content-Type: text/plain&apos;,\n            &apos;Content-Length: 11&apos;,\n            &apos;&apos;,\n            &apos;Hello World&apos;\n        ].join(&apos;\\n&apos;));\n    });\n}).listen(80);\n</code></pre><p>接着我们来看一个使用Socket发起HTTP客户端请求的例子。这个例子中，Socket客户端在建立连接后发送了一个HTTP GET请求，并通过<code>data</code>事件监听函数来获取服务器响应。</p>\n<pre><code>var options = {\n        port: 80,\n        host: &apos;www.example.com&apos;\n    };\n\nvar client = net.connect(options, function () {\n        client.write([\n            &apos;GET / HTTP/1.1&apos;,\n            &apos;User-Agent: curl/7.26.0&apos;,\n            &apos;Host: www.baidu.com&apos;,\n            &apos;Accept: */*&apos;,\n            &apos;&apos;,\n            &apos;&apos;\n        ].join(&apos;\\n&apos;));\n    });\n\nclient.on(&apos;data&apos;, function (data) {\n    console.log(data.toString());\n    client.end();\n});\n</code></pre><h3 id=\"灵机一点\"><a href=\"#灵机一点\" class=\"headerlink\" title=\"灵机一点\"></a>灵机一点</h3><p>使用NodeJS操作网络，特别是操作HTTP请求和响应时会遇到一些惊喜，这里对一些常见问题做解答。</p>\n<ul>\n<li><p>问： 为什么通过<code>headers</code>对象访问到的HTTP请求头或响应头字段不是驼峰的？</p>\n<p>  答： 从规范上讲，HTTP请求头和响应头字段都应该是驼峰的。但现实是残酷的，不是每个HTTP服务端或客户端程序都严格遵循规范，所以NodeJS在处理从别的客户端或服务端收到的头字段时，都统一地转换为了小写字母格式，以便开发者能使用统一的方式来访问头字段，例如<code>headers[&#39;content-length&#39;]</code>。</p>\n</li>\n<li><p>问： 为什么<code>http</code>模块创建的HTTP服务器返回的响应是<code>chunked</code>传输方式的？</p>\n<p>  答： 因为默认情况下，使用<code>.writeHead</code>方法写入响应头后，允许使用<code>.write</code>方法写入任意长度的响应体数据，并使用<code>.end</code>方法结束一个响应。由于响应体数据长度不确定，因此NodeJS自动在响应头里添加了<code>Transfer-Encoding: chunked</code>字段，并采用<code>chunked</code>传输方式。但是当响应体数据长度确定时，可使用<code>.writeHead</code>方法在响应头里加上<code>Content-Length</code>字段，这样做之后NodeJS就不会自动添加<code>Transfer-Encoding</code>字段和使用<code>chunked</code>传输方式。</p>\n</li>\n<li><p>问： 为什么使用<code>http</code>模块发起HTTP客户端请求时，有时候会发生<code>socket hang up</code>错误？</p>\n<p>  答： 发起客户端HTTP请求前需要先创建一个客户端。<code>http</code>模块提供了一个全局客户端<code>http.globalAgent</code>，可以让我们使用<code>.request</code>或<code>.get</code>方法时不用手动创建客户端。但是全局客户端默认只允许5个并发Socket连接，当某一个时刻HTTP客户端请求创建过多，超过这个数字时，就会发生<code>socket hang up</code>错误。解决方法也很简单，通过<code>http.globalAgent.maxSockets</code>属性把这个数字改大些即可。另外，<code>https</code>模块遇到这个问题时也一样通过<code>https.globalAgent.maxSockets</code>属性来处理。</p>\n</li>\n</ul>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>本章介绍了使用NodeJS操作网络时需要的API以及一些坑回避技巧，总结起来有以下几点：</p>\n<ul>\n<li><p><code>http</code>和<code>https</code>模块支持服务端模式和客户端模式两种使用方式。</p>\n</li>\n<li><p><code>request</code>和<code>response</code>对象除了用于读写头数据外，都可以当作数据流来操作。</p>\n</li>\n<li><p><code>url.parse</code>方法加上<code>request.url</code>属性是处理HTTP请求时的固定搭配。</p>\n</li>\n<li><p>使用<code>zlib</code>模块可以减少使用HTTP协议时的数据传输量。</p>\n</li>\n<li><p>通过<code>net</code>模块的Socket服务器与客户端可对HTTP协议做底层操作。</p>\n</li>\n<li><p>小心踩坑。</p>\n</li>\n</ul>\n","prev":{"title":"(转)Node.js搬运过来的那种V——进程管理","slug":"nodejs_05_process"},"next":{"title":"(转)Node.js搬运过来的那种III——文件操作","slug":"nodejs_03_file"},"link":"/2018/09/11","toc":[{"title":"网络操作","id":"网络操作","index":"1","children":[{"title":"开门红","id":"开门红","index":"1.1"},{"title":"API走马观花","id":"API走马观花","index":"1.2","children":[{"title":"HTTP","id":"HTTP","index":"1.2.1"},{"title":"HTTPS","id":"HTTPS","index":"1.2.2"},{"title":"URL","id":"URL","index":"1.2.3"},{"title":"Query String","id":"Query-String","index":"1.2.4"},{"title":"Zlib","id":"Zlib","index":"1.2.5"},{"title":"Net","id":"Net","index":"1.2.6"}]},{"title":"灵机一点","id":"灵机一点","index":"1.3"},{"title":"小结","id":"小结","index":"1.4"}]}]}