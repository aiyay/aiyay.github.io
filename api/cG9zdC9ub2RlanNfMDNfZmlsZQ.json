{"title":"(转)Node.js搬运过来的那种III——文件操作","date":"2018-09-11T05:16:20.000Z","author":"aiyay","excerpt":"","slug":"nodejs_03_file","dropcap":true,"tags":["npm","node.js","reprint"],"categories":["Node.js"],"updated":"2018-09-11T05:48:37.068Z","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><p>文章来源于<a href=\"https://github.com/nqdeng/7-days-nodejs\" target=\"_blank\" rel=\"noopener\">nqdeng</a>,感谢大佬的分享;</p>\n<h2 id=\"文件操作\"><a href=\"#文件操作\" class=\"headerlink\" title=\"文件操作\"></a>文件操作</h2><p>让前端觉得如获神器的不是NodeJS能做网络编程，而是NodeJS能够操作文件。小至文件查找，大至代码编译，几乎没有一个前端工具不操作文件。换个角度讲，几乎也只需要一些数据处理逻辑，再加上一些文件操作，就能够编写出大多数前端工具。本章将介绍与之相关的NodeJS内置模块。</p>\n<h3 id=\"开门红\"><a href=\"#开门红\" class=\"headerlink\" title=\"开门红\"></a>开门红</h3><p>NodeJS提供了基本的文件操作API，但是像文件拷贝这种高级功能就没有提供，因此我们先拿文件拷贝程序练手。与<code>copy</code>命令类似，我们的程序需要能接受源文件路径与目标文件路径两个参数。</p>\n<h4 id=\"小文件拷贝\"><a href=\"#小文件拷贝\" class=\"headerlink\" title=\"小文件拷贝\"></a>小文件拷贝</h4><p>我们使用NodeJS内置的<code>fs</code>模块简单实现这个程序如下。</p>\n<pre><code>var fs = require(&apos;fs&apos;);\n\nfunction copy(src, dst) {\n    fs.writeFileSync(dst, fs.readFileSync(src));\n}\n\nfunction main(argv) {\n    copy(argv[0], argv[1]);\n}\n\nmain(process.argv.slice(2));\n</code></pre><p>以上程序使用<code>fs.readFileSync</code>从源路径读取文件内容，并使用<code>fs.writeFileSync</code>将文件内容写入目标路径。</p>\n<blockquote>\n<p>   <strong>豆知识：</strong> <code>process</code>是一个全局变量，可通过<code>process.argv</code>获得命令行参数。由于<code>argv[0]</code>固定等于NodeJS执行程序的绝对路径，<code>argv[1]</code>固定等于主模块的绝对路径，因此第一个命令行参数从<code>argv[2]</code>这个位置开始。</p>\n</blockquote>\n<h4 id=\"大文件拷贝\"><a href=\"#大文件拷贝\" class=\"headerlink\" title=\"大文件拷贝\"></a>大文件拷贝</h4><p>上边的程序拷贝一些小文件没啥问题，但这种一次性把所有文件内容都读取到内存中后再一次性写入磁盘的方式不适合拷贝大文件，内存会爆仓。对于大文件，我们只能读一点写一点，直到完成拷贝。因此上边的程序需要改造如下。</p>\n<pre><code>var fs = require(&apos;fs&apos;);\n\nfunction copy(src, dst) {\n    fs.createReadStream(src).pipe(fs.createWriteStream(dst));\n}\n\nfunction main(argv) {\n    copy(argv[0], argv[1]);\n}\n\nmain(process.argv.slice(2));\n</code></pre><p>以上程序使用<code>fs.createReadStream</code>创建了一个源文件的只读数据流，并使用<code>fs.createWriteStream</code>创建了一个目标文件的只写数据流，并且用<code>pipe</code>方法把两个数据流连接了起来。连接起来后发生的事情，说得抽象点的话，水顺着水管从一个桶流到了另一个桶。</p>\n<h3 id=\"API走马观花\"><a href=\"#API走马观花\" class=\"headerlink\" title=\"API走马观花\"></a>API走马观花</h3><p>我们先大致看看NodeJS提供了哪些和文件操作有关的API。这里并不逐一介绍每个API的使用方法，官方文档已经做得很好了。</p>\n<h4 id=\"Buffer（数据块）\"><a href=\"#Buffer（数据块）\" class=\"headerlink\" title=\"Buffer（数据块）\"></a>Buffer（数据块）</h4><blockquote>\n<p>   <strong>官方文档： </strong> <a href=\"http://nodejs.org/api/buffer.html\" target=\"_blank\" rel=\"noopener\">http://nodejs.org/api/buffer.html</a></p>\n</blockquote>\n<p>JS语言自身只有字符串数据类型，没有二进制数据类型，因此NodeJS提供了一个与<code>String</code>对等的全局构造函数<code>Buffer</code>来提供对二进制数据的操作。除了可以读取文件得到<code>Buffer</code>的实例外，还能够直接构造，例如：</p>\n<pre><code>var bin = new Buffer([ 0x68, 0x65, 0x6c, 0x6c, 0x6f ]);\n</code></pre><p><code>Buffer</code>与字符串类似，除了可以用<code>.length</code>属性得到字节长度外，还可以用<code>[index]</code>方式读取指定位置的字节，例如：</p>\n<pre><code>bin[0]; // =&gt; 0x68;\n</code></pre><p><code>Buffer</code>与字符串能够互相转化，例如可以使用指定编码将二进制数据转化为字符串：</p>\n<pre><code>var str = bin.toString(&apos;utf-8&apos;); // =&gt; &quot;hello&quot;\n</code></pre><p>或者反过来，将字符串转换为指定编码下的二进制数据：</p>\n<pre><code>var bin = new Buffer(&apos;hello&apos;, &apos;utf-8&apos;); // =&gt; &lt;Buffer 68 65 6c 6c 6f&gt;\n</code></pre><p><code>Buffer</code>与字符串有一个重要区别。字符串是只读的，并且对字符串的任何修改得到的都是一个新字符串，原字符串保持不变。至于<code>Buffer</code>，更像是可以做指针操作的C语言数组。例如，可以用<code>[index]</code>方式直接修改某个位置的字节。</p>\n<pre><code>bin[0] = 0x48;\n</code></pre><p>而<code>.slice</code>方法也不是返回一个新的<code>Buffer</code>，而更像是返回了指向原<code>Buffer</code>中间的某个位置的指针，如下所示。</p>\n<pre><code>[ 0x68, 0x65, 0x6c, 0x6c, 0x6f ]\n    ^           ^\n    |           |\n   bin     bin.slice(2)\n</code></pre><p>因此对<code>.slice</code>方法返回的<code>Buffer</code>的修改会作用于原<code>Buffer</code>，例如：</p>\n<pre><code>var bin = new Buffer([ 0x68, 0x65, 0x6c, 0x6c, 0x6f ]);\nvar sub = bin.slice(2);\n\nsub[0] = 0x65;\nconsole.log(bin); // =&gt; &lt;Buffer 68 65 65 6c 6f&gt;\n</code></pre><p>也因此，如果想要拷贝一份<code>Buffer</code>，得首先创建一个新的<code>Buffer</code>，并通过<code>.copy</code>方法把原<code>Buffer</code>中的数据复制过去。这个类似于申请一块新的内存，并把已有内存中的数据复制过去。以下是一个例子。</p>\n<pre><code>var bin = new Buffer([ 0x68, 0x65, 0x6c, 0x6c, 0x6f ]);\nvar dup = new Buffer(bin.length);\n\nbin.copy(dup);\ndup[0] = 0x48;\nconsole.log(bin); // =&gt; &lt;Buffer 68 65 6c 6c 6f&gt;\nconsole.log(dup); // =&gt; &lt;Buffer 48 65 65 6c 6f&gt;\n</code></pre><p>总之，<code>Buffer</code>将JS的数据处理能力从字符串扩展到了任意二进制数据。</p>\n<h4 id=\"Stream（数据流）\"><a href=\"#Stream（数据流）\" class=\"headerlink\" title=\"Stream（数据流）\"></a>Stream（数据流）</h4><blockquote>\n<p>   <strong>官方文档： </strong> <a href=\"http://nodejs.org/api/stream.html\" target=\"_blank\" rel=\"noopener\">http://nodejs.org/api/stream.html</a></p>\n</blockquote>\n<p>当内存中无法一次装下需要处理的数据时，或者一边读取一边处理更加高效时，我们就需要用到数据流。NodeJS中通过各种<code>Stream</code>来提供对数据流的操作。</p>\n<p>以上边的大文件拷贝程序为例，我们可以为数据来源创建一个只读数据流，示例如下：</p>\n<pre><code>var rs = fs.createReadStream(pathname);\n\nrs.on(&apos;data&apos;, function (chunk) {\n    doSomething(chunk);\n});\n\nrs.on(&apos;end&apos;, function () {\n    cleanUp();\n});\n</code></pre><blockquote>\n<p>   <strong>豆知识：</strong> <code>Stream</code>基于事件机制工作，所有<code>Stream</code>的实例都继承于NodeJS提供的<a href=\"http://nodejs.org/api/events.html\" target=\"_blank\" rel=\"noopener\">EventEmitter</a>。</p>\n</blockquote>\n<p>上边的代码中<code>data</code>事件会源源不断地被触发，不管<code>doSomething</code>函数是否处理得过来。代码可以继续做如下改造，以解决这个问题。</p>\n<pre><code>var rs = fs.createReadStream(src);\n\nrs.on(&apos;data&apos;, function (chunk) {\n    rs.pause();\n    doSomething(chunk, function () {\n        rs.resume();\n    });\n});\n\nrs.on(&apos;end&apos;, function () {\n    cleanUp();\n});\n</code></pre><p>以上代码给<code>doSomething</code>函数加上了回调，因此我们可以在处理数据前暂停数据读取，并在处理数据后继续读取数据。</p>\n<p>此外，我们也可以为数据目标创建一个只写数据流，示例如下：</p>\n<pre><code>var rs = fs.createReadStream(src);\nvar ws = fs.createWriteStream(dst);\n\nrs.on(&apos;data&apos;, function (chunk) {\n    ws.write(chunk);\n});\n\nrs.on(&apos;end&apos;, function () {\n    ws.end();\n});\n</code></pre><p>我们把<code>doSomething</code>换成了往只写数据流里写入数据后，以上代码看起来就像是一个文件拷贝程序了。但是以上代码存在上边提到的问题，如果写入速度跟不上读取速度的话，只写数据流内部的缓存会爆仓。我们可以根据<code>.write</code>方法的返回值来判断传入的数据是写入目标了，还是临时放在了缓存了，并根据<code>drain</code>事件来判断什么时候只写数据流已经将缓存中的数据写入目标，可以传入下一个待写数据了。因此代码可以改造如下：</p>\n<pre><code>var rs = fs.createReadStream(src);\nvar ws = fs.createWriteStream(dst);\n\nrs.on(&apos;data&apos;, function (chunk) {\n    if (ws.write(chunk) === false) {\n        rs.pause();\n    }\n});\n\nrs.on(&apos;end&apos;, function () {\n    ws.end();\n});\n\nws.on(&apos;drain&apos;, function () {\n    rs.resume();\n});\n</code></pre><p>以上代码实现了数据从只读数据流到只写数据流的搬运，并包括了防爆仓控制。因为这种使用场景很多，例如上边的大文件拷贝程序，NodeJS直接提供了<code>.pipe</code>方法来做这件事情，其内部实现方式与上边的代码类似。</p>\n<h4 id=\"File-System（文件系统）\"><a href=\"#File-System（文件系统）\" class=\"headerlink\" title=\"File System（文件系统）\"></a>File System（文件系统）</h4><blockquote>\n<p>   <strong>官方文档： </strong> <a href=\"http://nodejs.org/api/fs.html\" target=\"_blank\" rel=\"noopener\">http://nodejs.org/api/fs.html</a></p>\n</blockquote>\n<p>NodeJS通过<code>fs</code>内置模块提供对文件的操作。<code>fs</code>模块提供的API基本上可以分为以下三类：</p>\n<ul>\n<li><p>文件属性读写。</p>\n<p>  其中常用的有<code>fs.stat</code>、<code>fs.chmod</code>、<code>fs.chown</code>等等。</p>\n</li>\n<li><p>文件内容读写。</p>\n<p>  其中常用的有<code>fs.readFile</code>、<code>fs.readdir</code>、<code>fs.writeFile</code>、<code>fs.mkdir</code>等等。</p>\n</li>\n<li><p>底层文件操作。</p>\n<p>  其中常用的有<code>fs.open</code>、<code>fs.read</code>、<code>fs.write</code>、<code>fs.close</code>等等。</p>\n</li>\n</ul>\n<p>NodeJS最精华的异步IO模型在<code>fs</code>模块里有着充分的体现，例如上边提到的这些API都通过回调函数传递结果。以<code>fs.readFile</code>为例：</p>\n<pre><code>fs.readFile(pathname, function (err, data) {\n    if (err) {\n        // Deal with error.\n    } else {\n        // Deal with data.\n    }\n});\n</code></pre><p>如上边代码所示，基本上所有<code>fs</code>模块API的回调参数都有两个。第一个参数在有错误发生时等于异常对象，第二个参数始终用于返回API方法执行结果。</p>\n<p>此外，<code>fs</code>模块的所有异步API都有对应的同步版本，用于无法使用异步操作时，或者同步操作更方便时的情况。同步API除了方法名的末尾多了一个<code>Sync</code>之外，异常对象与执行结果的传递方式也有相应变化。同样以<code>fs.readFileSync</code>为例：</p>\n<pre><code>try {\n    var data = fs.readFileSync(pathname);\n    // Deal with data.\n} catch (err) {\n    // Deal with error.\n}\n</code></pre><p><code>fs</code>模块提供的API很多，这里不一一介绍，需要时请自行查阅官方文档。</p>\n<h4 id=\"Path（路径）\"><a href=\"#Path（路径）\" class=\"headerlink\" title=\"Path（路径）\"></a>Path（路径）</h4><blockquote>\n<p>   <strong>官方文档： </strong> <a href=\"http://nodejs.org/api/path.html\" target=\"_blank\" rel=\"noopener\">http://nodejs.org/api/path.html</a></p>\n</blockquote>\n<p>操作文件时难免不与文件路径打交道。NodeJS提供了<code>path</code>内置模块来简化路径相关操作，并提升代码可读性。以下分别介绍几个常用的API。</p>\n<ul>\n<li><p>path.normalize</p>\n<p>  将传入的路径转换为标准路径，具体讲的话，除了解析路径中的<code>.</code>与<code>..</code>外，还能去掉多余的斜杠。如果有程序需要使用路径作为某些数据的索引，但又允许用户随意输入路径时，就需要使用该方法保证路径的唯一性。以下是一个例子：</p>\n<pre><code>var cache = {};\n\nfunction store(key, value) {\n    cache[path.normalize(key)] = value;\n}\n\nstore(&apos;foo/bar&apos;, 1);\nstore(&apos;foo//baz//../bar&apos;, 2);\nconsole.log(cache);  // =&gt; { &quot;foo/bar&quot;: 2 }\n</code></pre><blockquote>\n<p>   <strong>坑出没注意： </strong> 标准化之后的路径里的斜杠在Windows系统下是<code>\\</code>，而在Linux系统下是<code>/</code>。如果想保证任何系统下都使用<code>/</code>作为路径分隔符的话，需要用<code>.replace(/\\\\/g, &#39;/&#39;)</code>再替换一下标准路径。</p>\n</blockquote>\n</li>\n<li><p>path.join</p>\n<p>  将传入的多个路径拼接为标准路径。该方法可避免手工拼接路径字符串的繁琐，并且能在不同系统下正确使用相应的路径分隔符。以下是一个例子：</p>\n<pre><code>path.join(&apos;foo/&apos;, &apos;baz/&apos;, &apos;../bar&apos;); // =&gt; &quot;foo/bar&quot;\n</code></pre></li>\n<li><p>path.extname</p>\n<p>  当我们需要根据不同文件扩展名做不同操作时，该方法就显得很好用。以下是一个例子：</p>\n<pre><code>path.extname(&apos;foo/bar.js&apos;); // =&gt; &quot;.js&quot;\n</code></pre></li>\n</ul>\n<p><code>path</code>模块提供的其余方法也不多，稍微看一下官方文档就能全部掌握。</p>\n<h3 id=\"遍历目录\"><a href=\"#遍历目录\" class=\"headerlink\" title=\"遍历目录\"></a>遍历目录</h3><p>遍历目录是操作文件时的一个常见需求。比如写一个程序，需要找到并处理指定目录下的所有JS文件时，就需要遍历整个目录。</p>\n<h4 id=\"递归算法\"><a href=\"#递归算法\" class=\"headerlink\" title=\"递归算法\"></a>递归算法</h4><p>遍历目录时一般使用递归算法，否则就难以编写出简洁的代码。递归算法与数学归纳法类似，通过不断缩小问题的规模来解决问题。以下示例说明了这种方法。</p>\n<pre><code>function factorial(n) {\n    if (n === 1) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }\n}\n</code></pre><p>上边的函数用于计算N的阶乘（N!）。可以看到，当N大于1时，问题简化为计算N乘以N-1的阶乘。当N等于1时，问题达到最小规模，不需要再简化，因此直接返回1。</p>\n<blockquote>\n<p>   <strong>陷阱：</strong> 使用递归算法编写的代码虽然简洁，但由于每递归一次就产生一次函数调用，在需要优先考虑性能时，需要把递归算法转换为循环算法，以减少函数调用次数。</p>\n</blockquote>\n<h4 id=\"遍历算法\"><a href=\"#遍历算法\" class=\"headerlink\" title=\"遍历算法\"></a>遍历算法</h4><p>目录是一个树状结构，在遍历时一般使用深度优先+先序遍历算法。深度优先，意味着到达一个节点后，首先接着遍历子节点而不是邻居节点。先序遍历，意味着首次到达了某节点就算遍历完成，而不是最后一次返回某节点才算数。因此使用这种遍历方式时，下边这棵树的遍历顺序是<code>A &gt; B &gt; D &gt; E &gt; C &gt; F</code>。</p>\n<pre><code>    A\n   / \\\n  B   C\n / \\   \\\nD   E   F\n</code></pre><h4 id=\"同步遍历\"><a href=\"#同步遍历\" class=\"headerlink\" title=\"同步遍历\"></a>同步遍历</h4><p>了解了必要的算法后，我们可以简单地实现以下目录遍历函数。</p>\n<pre><code>function travel(dir, callback) {\n    fs.readdirSync(dir).forEach(function (file) {\n        var pathname = path.join(dir, file);\n\n        if (fs.statSync(pathname).isDirectory()) {\n            travel(pathname, callback);\n        } else {\n            callback(pathname);\n        }\n    });\n}\n</code></pre><p>可以看到，该函数以某个目录作为遍历的起点。遇到一个子目录时，就先接着遍历子目录。遇到一个文件时，就把文件的绝对路径传给回调函数。回调函数拿到文件路径后，就可以做各种判断和处理。因此假设有以下目录：</p>\n<pre><code>- /home/user/\n    - foo/\n        x.js\n    - bar/\n        y.js\n    z.css\n</code></pre><p>使用以下代码遍历该目录时，得到的输入如下。</p>\n<pre><code>travel(&apos;/home/user&apos;, function (pathname) {\n    console.log(pathname);\n});\n\n------------------------\n/home/user/foo/x.js\n/home/user/bar/y.js\n/home/user/z.css\n</code></pre><h4 id=\"异步遍历\"><a href=\"#异步遍历\" class=\"headerlink\" title=\"异步遍历\"></a>异步遍历</h4><p>如果读取目录或读取文件状态时使用的是异步API，目录遍历函数实现起来会有些复杂，但原理完全相同。<code>travel</code>函数的异步版本如下。</p>\n<pre><code>function travel(dir, callback, finish) {\n    fs.readdir(dir, function (err, files) {\n        (function next(i) {\n            if (i &lt; files.length) {\n                var pathname = path.join(dir, files[i]);\n\n                fs.stat(pathname, function (err, stats) {\n                    if (stats.isDirectory()) {\n                        travel(pathname, callback, function () {\n                            next(i + 1);\n                        });\n                    } else {\n                        callback(pathname, function () {\n                            next(i + 1);\n                        });\n                    }\n                });\n            } else {\n                finish &amp;&amp; finish();\n            }\n        }(0));\n    });\n}\n</code></pre><p>这里不详细介绍异步遍历函数的编写技巧，在后续章节中会详细介绍这个。总之我们可以看到异步编程还是蛮复杂的。</p>\n<h3 id=\"文本编码\"><a href=\"#文本编码\" class=\"headerlink\" title=\"文本编码\"></a>文本编码</h3><p>使用NodeJS编写前端工具时，操作得最多的是文本文件，因此也就涉及到了文件编码的处理问题。我们常用的文本编码有<code>UTF8</code>和<code>GBK</code>两种，并且<code>UTF8</code>文件还可能带有BOM。在读取不同编码的文本文件时，需要将文件内容转换为JS使用的<code>UTF8</code>编码字符串后才能正常处理。</p>\n<h4 id=\"BOM的移除\"><a href=\"#BOM的移除\" class=\"headerlink\" title=\"BOM的移除\"></a>BOM的移除</h4><p>BOM用于标记一个文本文件使用Unicode编码，其本身是一个Unicode字符（”\\uFEFF”），位于文本文件头部。在不同的Unicode编码下，BOM字符对应的二进制字节如下：</p>\n<pre><code>    Bytes      Encoding\n----------------------------\n    FE FF       UTF16BE\n    FF FE       UTF16LE\n    EF BB BF    UTF8\n</code></pre><p>因此，我们可以根据文本文件头几个字节等于啥来判断文件是否包含BOM，以及使用哪种Unicode编码。但是，BOM字符虽然起到了标记文件编码的作用，其本身却不属于文件内容的一部分，如果读取文本文件时不去掉BOM，在某些使用场景下就会有问题。例如我们把几个JS文件合并成一个文件后，如果文件中间含有BOM字符，就会导致浏览器JS语法错误。因此，使用NodeJS读取文本文件时，一般需要去掉BOM。例如，以下代码实现了识别和去除UTF8 BOM的功能。</p>\n<pre><code>function readText(pathname) {\n    var bin = fs.readFileSync(pathname);\n\n    if (bin[0] === 0xEF &amp;&amp; bin[1] === 0xBB &amp;&amp; bin[2] === 0xBF) {\n        bin = bin.slice(3);\n    }\n\n    return bin.toString(&apos;utf-8&apos;);\n}\n</code></pre><h4 id=\"GBK转UTF8\"><a href=\"#GBK转UTF8\" class=\"headerlink\" title=\"GBK转UTF8\"></a>GBK转UTF8</h4><p>NodeJS支持在读取文本文件时，或者在<code>Buffer</code>转换为字符串时指定文本编码，但遗憾的是，GBK编码不在NodeJS自身支持范围内。因此，一般我们借助<code>iconv-lite</code>这个三方包来转换编码。使用NPM下载该包后，我们可以按下边方式编写一个读取GBK文本文件的函数。</p>\n<pre><code>var iconv = require(&apos;iconv-lite&apos;);\n\nfunction readGBKText(pathname) {\n    var bin = fs.readFileSync(pathname);\n\n    return iconv.decode(bin, &apos;gbk&apos;);\n}\n</code></pre><h4 id=\"单字节编码\"><a href=\"#单字节编码\" class=\"headerlink\" title=\"单字节编码\"></a>单字节编码</h4><p>有时候，我们无法预知需要读取的文件采用哪种编码，因此也就无法指定正确的编码。比如我们要处理的某些CSS文件中，有的用GBK编码，有的用UTF8编码。虽然可以一定程度可以根据文件的字节内容猜测出文本编码，但这里要介绍的是有些局限，但是要简单得多的一种技术。</p>\n<p>首先我们知道，如果一个文本文件只包含英文字符，比如<code>Hello World</code>，那无论用GBK编码或是UTF8编码读取这个文件都是没问题的。这是因为在这些编码下，ASCII0~128范围内字符都使用相同的单字节编码。</p>\n<p>反过来讲，即使一个文本文件中有中文等字符，如果我们需要处理的字符仅在ASCII0~128范围内，比如除了注释和字符串以外的JS代码，我们就可以统一使用单字节编码来读取文件，不用关心文件的实际编码是GBK还是UTF8。以下示例说明了这种方法。</p>\n<pre><code>1. GBK编码源文件内容：\n    var foo = &apos;中文&apos;;\n2. 对应字节：\n    76 61 72 20 66 6F 6F 20 3D 20 27 D6 D0 CE C4 27 3B\n3. 使用单字节编码读取后得到的内容：\n    var foo = &apos;{乱码}{乱码}{乱码}{乱码}&apos;;\n4. 替换内容：\n    var bar = &apos;{乱码}{乱码}{乱码}{乱码}&apos;;\n5. 使用单字节编码保存后对应字节：\n    76 61 72 20 62 61 72 20 3D 20 27 D6 D0 CE C4 27 3B\n6. 使用GBK编码读取后得到内容：\n    var bar = &apos;中文&apos;;\n</code></pre><p>这里的诀窍在于，不管大于0xEF的单个字节在单字节编码下被解析成什么乱码字符，使用同样的单字节编码保存这些乱码字符时，背后对应的字节保持不变。</p>\n<p>NodeJS中自带了一种<code>binary</code>编码可以用来实现这个方法，因此在下例中，我们使用这种编码来演示上例对应的代码该怎么写。</p>\n<pre><code>function replace(pathname) {\n    var str = fs.readFileSync(pathname, &apos;binary&apos;);\n    str = str.replace(&apos;foo&apos;, &apos;bar&apos;);\n    fs.writeFileSync(pathname, str, &apos;binary&apos;);\n}\n</code></pre><h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>本章介绍了使用NodeJS操作文件时需要的API以及一些技巧，总结起来有以下几点：</p>\n<ul>\n<li><p>学好文件操作，编写各种程序都不怕。</p>\n</li>\n<li><p>如果不是很在意性能，<code>fs</code>模块的同步API能让生活更加美好。</p>\n</li>\n<li><p>需要对文件读写做到字节级别的精细控制时，请使用<code>fs</code>模块的文件底层操作API。</p>\n</li>\n<li><p>不要使用拼接字符串的方式来处理路径，使用<code>path</code>模块。</p>\n</li>\n<li><p>掌握好目录遍历和文件编码处理技巧，很实用。</p>\n</li>\n</ul>\n","prev":{"title":"(转)Node.js搬运过来的那种Ⅳ——网络操作","slug":"nodejs_04_network"},"next":{"title":"(转)Node.js搬运过来的那种Ⅱ——代码的组织和部署","slug":"nodejs_02_code_management_and_deployment"},"link":"/2018/09/11","toc":[{"title":"文件操作","id":"文件操作","index":"1","children":[{"title":"开门红","id":"开门红","index":"1.1","children":[{"title":"小文件拷贝","id":"小文件拷贝","index":"1.1.1"},{"title":"大文件拷贝","id":"大文件拷贝","index":"1.1.2"}]},{"title":"API走马观花","id":"API走马观花","index":"1.2","children":[{"title":"Buffer（数据块）","id":"Buffer（数据块）","index":"1.2.1"},{"title":"Stream（数据流）","id":"Stream（数据流）","index":"1.2.2"},{"title":"File System（文件系统）","id":"File-System（文件系统）","index":"1.2.3"},{"title":"Path（路径）","id":"Path（路径）","index":"1.2.4"}]},{"title":"遍历目录","id":"遍历目录","index":"1.3","children":[{"title":"递归算法","id":"递归算法","index":"1.3.1"},{"title":"遍历算法","id":"遍历算法","index":"1.3.2"},{"title":"同步遍历","id":"同步遍历","index":"1.3.3"},{"title":"异步遍历","id":"异步遍历","index":"1.3.4"}]},{"title":"文本编码","id":"文本编码","index":"1.4","children":[{"title":"BOM的移除","id":"BOM的移除","index":"1.4.1"},{"title":"GBK转UTF8","id":"GBK转UTF8","index":"1.4.2"},{"title":"单字节编码","id":"单字节编码","index":"1.4.3"}]},{"title":"小结","id":"小结","index":"1.5"}]}]}