{"title":"(转)Node.js搬运过来的那种Ⅰ——NodeJS基础","date":"2018-09-11T05:14:53.000Z","author":"aiyay","thumbnail":"http://img1.ph.126.net/hFxyxTm-8cpGNZUw1OX1EA==/6597292967519310454.jpg","excerpt":"","slug":"nodejs_01_getting_started","dropcap":true,"tags":["npm","node.js","reprint"],"categories":["Node.js"],"updated":"2018-09-11T05:50:34.174Z","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><p>文章来源于<a href=\"https://github.com/nqdeng/7-days-nodejs\" target=\"_blank\" rel=\"noopener\">nqdeng</a>,感谢大佬的分享;</p>\n<h2 id=\"NodeJS基础\"><a href=\"#NodeJS基础\" class=\"headerlink\" title=\"NodeJS基础\"></a>NodeJS基础</h2><h3 id=\"什么是NodeJS\"><a href=\"#什么是NodeJS\" class=\"headerlink\" title=\"什么是NodeJS\"></a>什么是NodeJS</h3><p>JS是脚本语言，脚本语言都需要一个解析器才能运行。对于写在HTML页面里的JS，浏览器充当了解析器的角色。而对于需要独立运行的JS，NodeJS就是一个解析器。</p>\n<p>每一种解析器都是一个运行环境，不但允许JS定义各种数据结构，进行各种计算，还允许JS使用运行环境提供的内置对象和方法做一些事情。例如运行在浏览器中的JS的用途是操作DOM，浏览器就提供了<code>document</code>之类的内置对象。而运行在NodeJS中的JS的用途是操作磁盘文件或搭建HTTP服务器，NodeJS就相应提供了<code>fs</code>、<code>http</code>等内置对象。</p>\n<h3 id=\"有啥用处\"><a href=\"#有啥用处\" class=\"headerlink\" title=\"有啥用处\"></a>有啥用处</h3><p>尽管存在一听说可以直接运行JS文件就觉得很酷的同学，但大多数同学在接触新东西时首先关心的是有啥用处，以及能带来啥价值。</p>\n<p>NodeJS的作者说，他创造NodeJS的目的是为了实现高性能Web服务器，他首先看重的是事件机制和异步IO模型的优越性，而不是JS。但是他需要选择一种编程语言实现他的想法，这种编程语言不能自带IO功能，并且需要能良好支持事件机制。JS没有自带IO功能，天生就用于处理浏览器中的DOM事件，并且拥有一大群程序员，因此就成为了天然的选择。</p>\n<p>如他所愿，NodeJS在服务端活跃起来，出现了大批基于NodeJS的Web服务。而另一方面，NodeJS让前端众如获神器，终于可以让自己的能力覆盖范围跳出浏览器窗口，更大批的前端工具如雨后春笋。</p>\n<p>因此，对于前端而言，虽然不是人人都要拿NodeJS写一个服务器程序，但简单可至使用命令交互模式调试JS代码片段，复杂可至编写工具提升工作效率。</p>\n<p>NodeJS生态圈正欣欣向荣。</p>\n<h3 id=\"如何安装\"><a href=\"#如何安装\" class=\"headerlink\" title=\"如何安装\"></a>如何安装</h3><h4 id=\"安装程序\"><a href=\"#安装程序\" class=\"headerlink\" title=\"安装程序\"></a>安装程序</h4><p>NodeJS提供了一些安装程序，都可以在<a href=\"http://nodejs.org/download/\" target=\"_blank\" rel=\"noopener\">nodejs.org</a>这里下载并安装。</p>\n<p>Windows系统下，选择和系统版本匹配的<code>.msi</code>后缀的安装文件。Mac OS X系统下，选择<code>.pkg</code>后缀的安装文件。</p>\n<h4 id=\"编译安装\"><a href=\"#编译安装\" class=\"headerlink\" title=\"编译安装\"></a>编译安装</h4><p>Linux系统下没有现成的安装程序可用，虽然一些发行版可以使用<code>apt-get</code>之类的方式安装，但不一定能安装到最新版。因此Linux系统下一般使用以下方式编译方式安装NodeJS。</p>\n<ol>\n<li><p>确保系统下g++版本在4.6以上，python版本在2.6以上。</p>\n</li>\n<li><p>从<a href=\"http://nodejs.org/download/\" target=\"_blank\" rel=\"noopener\">nodejs.org</a>下载<code>tar.gz</code>后缀的NodeJS最新版源代码包并解压到某个位置。</p>\n</li>\n<li><p>进入解压到的目录，使用以下命令编译和安装。</p>\n<pre><code>$ ./configure\n$ make\n$ sudo make install\n</code></pre></li>\n</ol>\n<h3 id=\"如何运行\"><a href=\"#如何运行\" class=\"headerlink\" title=\"如何运行\"></a>如何运行</h3><p>打开终端，键入<code>node</code>进入命令交互模式，可以输入一条代码语句后立即执行并显示结果，例如：</p>\n<pre><code>$ node\n&gt; console.log(&apos;Hello World!&apos;);\nHello World!\n</code></pre><p>如果要运行一大段代码的话，可以先写一个JS文件再运行。例如有以下<code>hello.js</code>。</p>\n<pre><code>function hello() {\n    console.log(&apos;Hello World!&apos;);\n}\nhello();\n</code></pre><p>写好后在终端下键入<code>node hello.js</code>运行，结果如下：</p>\n<pre><code>$ node hello.js\nHello World!\n</code></pre><h4 id=\"权限问题\"><a href=\"#权限问题\" class=\"headerlink\" title=\"权限问题\"></a>权限问题</h4><p>在Linux系统下，使用NodeJS监听80或443端口提供HTTP(S)服务时需要root权限，有两种方式可以做到。</p>\n<p>一种方式是使用<code>sudo</code>命令运行NodeJS。例如通过以下命令运行的<code>server.js</code>中有权限使用80和443端口。一般推荐这种方式，可以保证仅为有需要的JS脚本提供root权限。</p>\n<pre><code>$ sudo node server.js\n</code></pre><p>另一种方式是使用<code>chmod +s</code>命令让NodeJS总是以root权限运行，具体做法如下。因为这种方式让任何JS脚本都有了root权限，不太安全，因此在需要很考虑安全的系统下不推荐使用。</p>\n<pre><code>$ sudo chown root /usr/local/bin/node\n$ sudo chmod +s /usr/local/bin/node\n</code></pre><h3 id=\"模块\"><a href=\"#模块\" class=\"headerlink\" title=\"模块\"></a>模块</h3><p>编写稍大一点的程序时一般都会将代码模块化。在NodeJS中，一般将代码合理拆分到不同的JS文件中，每一个文件就是一个模块，而文件路径就是模块名。</p>\n<p>在编写每个模块时，都有<code>require</code>、<code>exports</code>、<code>module</code>三个预先定义好的变量可供使用。</p>\n<h4 id=\"require\"><a href=\"#require\" class=\"headerlink\" title=\"require\"></a>require</h4><p><code>require</code>函数用于在当前模块中加载和使用别的模块，传入一个模块名，返回一个模块导出对象。模块名可使用相对路径（以<code>./</code>开头），或者是绝对路径（以<code>/</code>或<code>C:</code>之类的盘符开头）。另外，模块名中的<code>.js</code>扩展名可以省略。以下是一个例子。</p>\n<pre><code>var foo1 = require(&apos;./foo&apos;);\nvar foo2 = require(&apos;./foo.js&apos;);\nvar foo3 = require(&apos;/home/user/foo&apos;);\nvar foo4 = require(&apos;/home/user/foo.js&apos;);\n\n// foo1至foo4中保存的是同一个模块的导出对象。\n</code></pre><p>另外，可以使用以下方式加载和使用一个JSON文件。</p>\n<pre><code>var data = require(&apos;./data.json&apos;);\n</code></pre><h4 id=\"exports\"><a href=\"#exports\" class=\"headerlink\" title=\"exports\"></a>exports</h4><p><code>exports</code>对象是当前模块的导出对象，用于导出模块公有方法和属性。别的模块通过<code>require</code>函数使用当前模块时得到的就是当前模块的<code>exports</code>对象。以下例子中导出了一个公有方法。</p>\n<pre><code>exports.hello = function () {\n    console.log(&apos;Hello World!&apos;);\n};\n</code></pre><h4 id=\"module\"><a href=\"#module\" class=\"headerlink\" title=\"module\"></a>module</h4><p>通过<code>module</code>对象可以访问到当前模块的一些相关信息，但最多的用途是替换当前模块的导出对象。例如模块导出对象默认是一个普通对象，如果想改成一个函数的话，可以使用以下方式。</p>\n<pre><code>module.exports = function () {\n    console.log(&apos;Hello World!&apos;);\n};\n</code></pre><p>以上代码中，模块默认导出对象被替换为一个函数。</p>\n<h4 id=\"模块初始化\"><a href=\"#模块初始化\" class=\"headerlink\" title=\"模块初始化\"></a>模块初始化</h4><p>一个模块中的JS代码仅在模块第一次被使用时执行一次，并在执行过程中初始化模块的导出对象。之后，缓存起来的导出对象被重复利用。</p>\n<h4 id=\"主模块\"><a href=\"#主模块\" class=\"headerlink\" title=\"主模块\"></a>主模块</h4><p>通过命令行参数传递给NodeJS以启动程序的模块被称为主模块。主模块负责调度组成整个程序的其它模块完成工作。例如通过以下命令启动程序时，<code>main.js</code>就是主模块。</p>\n<pre><code>$ node main.js\n</code></pre><h4 id=\"完整示例\"><a href=\"#完整示例\" class=\"headerlink\" title=\"完整示例\"></a>完整示例</h4><p>例如有以下目录。</p>\n<pre><code>- /home/user/hello/\n    - util/\n        counter.js\n    main.js\n</code></pre><p>其中<code>counter.js</code>内容如下：</p>\n<pre><code>var i = 0;\n\nfunction count() {\n    return ++i;\n}\n\nexports.count = count;\n</code></pre><p>该模块内部定义了一个私有变量<code>i</code>，并在<code>exports</code>对象导出了一个公有方法<code>count</code>。</p>\n<p>主模块<code>main.js</code>内容如下：</p>\n<pre><code>var counter1 = require(&apos;./util/counter&apos;);\nvar    counter2 = require(&apos;./util/counter&apos;);\n\nconsole.log(counter1.count());\nconsole.log(counter2.count());\nconsole.log(counter2.count());\n</code></pre><p>运行该程序的结果如下：</p>\n<pre><code>$ node main.js\n1\n2\n3\n</code></pre><p>可以看到，<code>counter.js</code>并没有因为被require了两次而初始化两次。</p>\n<h3 id=\"二进制模块\"><a href=\"#二进制模块\" class=\"headerlink\" title=\"二进制模块\"></a>二进制模块</h3><p>虽然一般我们使用JS编写模块，但NodeJS也支持使用C/C++编写二进制模块。编译好的二进制模块除了文件扩展名是<code>.node</code>外，和JS模块的使用方式相同。虽然二进制模块能使用操作系统提供的所有功能，拥有无限的潜能，但对于前端同学而言编写过于困难，并且难以跨平台使用，因此不在本教程的覆盖范围内。</p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>本章介绍了有关NodeJS的基本概念和使用方法，总结起来有以下知识点：</p>\n<ul>\n<li><p>NodeJS是一个JS脚本解析器，任何操作系统下安装NodeJS本质上做的事情都是把NodeJS执行程序复制到一个目录，然后保证这个目录在系统PATH环境变量下，以便终端下可以使用<code>node</code>命令。</p>\n</li>\n<li><p>终端下直接输入<code>node</code>命令可进入命令交互模式，很适合用来测试一些JS代码片段，比如正则表达式。</p>\n</li>\n<li><p>NodeJS使用<a href=\"http://wiki.commonjs.org/\" target=\"_blank\" rel=\"noopener\">CMD</a>模块系统，主模块作为程序入口点，所有模块在执行过程中只初始化一次。</p>\n</li>\n<li><p>除非JS模块不能满足需求，否则不要轻易使用二进制模块，否则你的用户会叫苦连天。</p>\n</li>\n</ul>\n","prev":{"title":"(转)Node.js搬运过来的那种Ⅱ——代码的组织和部署","slug":"nodejs_02_code_management_and_deployment"},"next":{"title":"Hexo食用指南","slug":"hexo-guide"},"link":"/2018/09/11","toc":[{"title":"NodeJS基础","id":"NodeJS基础","index":"1","children":[{"title":"什么是NodeJS","id":"什么是NodeJS","index":"1.1"},{"title":"有啥用处","id":"有啥用处","index":"1.2"},{"title":"如何安装","id":"如何安装","index":"1.3","children":[{"title":"安装程序","id":"安装程序","index":"1.3.1"},{"title":"编译安装","id":"编译安装","index":"1.3.2"}]},{"title":"如何运行","id":"如何运行","index":"1.4","children":[{"title":"权限问题","id":"权限问题","index":"1.4.1"}]},{"title":"模块","id":"模块","index":"1.5","children":[{"title":"require","id":"require","index":"1.5.1"},{"title":"exports","id":"exports","index":"1.5.2"},{"title":"module","id":"module","index":"1.5.3"},{"title":"模块初始化","id":"模块初始化","index":"1.5.4"},{"title":"主模块","id":"主模块","index":"1.5.5"},{"title":"完整示例","id":"完整示例","index":"1.5.6"}]},{"title":"二进制模块","id":"二进制模块","index":"1.6"},{"title":"小结","id":"小结","index":"1.7"}]}]}