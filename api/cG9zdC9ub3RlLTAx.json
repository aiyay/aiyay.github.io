{"title":"Js中的‘~~’符号","date":"2018-12-10T12:50:20.000Z","author":"aiyay","excerpt":"","slug":"note-01","dropcap":true,"categories":["note"],"updated":"2018-12-14T01:34:36.697Z","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h2 id=\"Js中的‘-’符号的意思\"><a href=\"#Js中的‘-’符号的意思\" class=\"headerlink\" title=\"Js中的‘~~’符号的意思\"></a>Js中的‘~~’符号的意思</h2><h4 id=\"是js里的按位取反操作符，-就是执行两次按位取反，其实就是保持原值，但是注意虽然是原值，但是对布尔型变量执行这个操作，会转化成相应的数值型变量，也就是-true-1，-false-0-。这种方法速度快，代价远小于写表达式或者判断条件。同时还可以替代-Math-floor\"><a href=\"#是js里的按位取反操作符，-就是执行两次按位取反，其实就是保持原值，但是注意虽然是原值，但是对布尔型变量执行这个操作，会转化成相应的数值型变量，也就是-true-1，-false-0-。这种方法速度快，代价远小于写表达式或者判断条件。同时还可以替代-Math-floor\" class=\"headerlink\" title=\"~是js里的按位取反操作符， ~~   就是执行两次按位取反，其实就是保持原值，但是注意虽然是原值，但是对布尔型变量执行这个操作，会转化成相应的数值型变量，也就是  ~~true === 1，~~false === 0 。这种方法速度快，代价远小于写表达式或者判断条件。同时还可以替代 Math.floor()\"></a><em>~</em>是js里的按位取反操作符， <em>~~</em>   就是执行两次按位取反，其实就是保持原值，但是注意虽然是原值，但是对布尔型变量执行这个操作，会转化成相应的数值型变量，也就是  <code>~~true === 1，~~false === 0</code> 。这种方法速度快，代价远小于写表达式或者判断条件。同时还可以替代 <code>Math.floor()</code></h4>","prev":{"title":"关于简单跨域请求和带预检的跨域请求","slug":"note-02"},"next":{"title":"NPM 介绍","slug":"esoterica-01-npm"},"link":"/2018/12/10","toc":[{"title":"Js中的‘~~’符号的意思","id":"Js中的‘-’符号的意思","index":"1"}]}